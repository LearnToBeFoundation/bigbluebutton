<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" icon="{drawIcon}" 
		   xmlns:mate="http://mate.asfusion.com/"
		   creationComplete="init()" 
		   mouseOver = "mouseOverHandler(event)"
		   mouseOut = "mouseOutHandler(event)"
		   click = "handleClick(event)"
           height="24"
		   toolTip="{this.selected ? drawOffTooltip : drawOnTooltip}"
		   visible="false"
		   implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<!--<mate:Listener type="{ShortcutEvent.SHARE_WEBCAM}" method="remoteClick" />-->
	<mate:Listener type="{SimwriteEvent.TOGGLE_BUTTON_STATE}" method="toggleThisButton" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.modules.whiteboard.events.SimwriteEvent;			
			
			private var images:Images = new Images();
			[Bindable] public var drawIcon:Class = images.user_draw;
			
			private var _currentState:Boolean = true;

			[Bindable] private var drawOnTooltip:String = "Turn on multi-draw";
			[Bindable] private var drawOffTooltip:String = "Turn off multi-draw";
			
			private var dispatcher:Dispatcher;
			
			private function init():void {
				dispatcher = new Dispatcher();
				this.toolTip = drawOnTooltip;
				drawIcon = images.user_draw;
				this.enabled = true;
				this.selected = true;
				_currentState = true;
			}
			
		  public function set isModerator(moderator:Boolean):void {
			visible = moderator;
			includeInLayout = moderator;
		  }

			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == true)
					drawIcon = images.user_draw_off;
				else
					drawIcon = images.user_draw;			
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == true)
					drawIcon = images.user_draw;
				else
					drawIcon = images.user_draw_off;			
			}

			public function getAlignment():String {
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String {
				return "Mult-draw button";
			}
			
			private function handleClick(event:MouseEvent):void {
				_currentState  = !_currentState;
				var simwriteEvent:SimwriteEvent = new SimwriteEvent(SimwriteEvent.SIMWRITE_BUTTON_CLICKED);
				
				if(_currentState) {
					this.selected = true;
					simwriteEvent.simwriteEnabled = true; 
					drawIcon = images.user_draw;
				} else {
					this.selected = false;
					simwriteEvent.simwriteEnabled = false;
					drawIcon = images.user_draw_off;
				}
				
				dispatcher.dispatchEvent(simwriteEvent);
			}
			
			public function isMultiDrawEnabled():Boolean {
				return _currentState;
			}
			
			private function toggleThisButton(event:SimwriteEvent):void {
				var state:Boolean = event.simwriteEnabled;
				if(state)
					this.selected = true;
				else
					this.selected = false;
			}
		]]>
	</mx:Script>
</mx:Button>
